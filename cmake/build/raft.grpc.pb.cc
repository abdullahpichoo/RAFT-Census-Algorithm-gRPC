// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace raft {

static const char* dummyRaftService_method_names[] = {
  "/raft.dummyRaftService/send_message",
  "/raft.dummyRaftService/vote_request",
};

std::unique_ptr< dummyRaftService::Stub> dummyRaftService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< dummyRaftService::Stub> stub(new dummyRaftService::Stub(channel, options));
  return stub;
}

dummyRaftService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_send_message_(dummyRaftService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_vote_request_(dummyRaftService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status dummyRaftService::Stub::send_message(::grpc::ClientContext* context, const ::raft::MessageContent& request, ::raft::MessageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raft::MessageContent, ::raft::MessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_message_, context, request, response);
}

void dummyRaftService::Stub::async::send_message(::grpc::ClientContext* context, const ::raft::MessageContent* request, ::raft::MessageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raft::MessageContent, ::raft::MessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_message_, context, request, response, std::move(f));
}

void dummyRaftService::Stub::async::send_message(::grpc::ClientContext* context, const ::raft::MessageContent* request, ::raft::MessageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft::MessageReply>* dummyRaftService::Stub::PrepareAsyncsend_messageRaw(::grpc::ClientContext* context, const ::raft::MessageContent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raft::MessageReply, ::raft::MessageContent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raft::MessageReply>* dummyRaftService::Stub::Asyncsend_messageRaw(::grpc::ClientContext* context, const ::raft::MessageContent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dummyRaftService::Stub::vote_request(::grpc::ClientContext* context, const ::raft::VoteRequest& request, ::raft::VoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raft::VoteRequest, ::raft::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_vote_request_, context, request, response);
}

void dummyRaftService::Stub::async::vote_request(::grpc::ClientContext* context, const ::raft::VoteRequest* request, ::raft::VoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raft::VoteRequest, ::raft::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_vote_request_, context, request, response, std::move(f));
}

void dummyRaftService::Stub::async::vote_request(::grpc::ClientContext* context, const ::raft::VoteRequest* request, ::raft::VoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_vote_request_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft::VoteReply>* dummyRaftService::Stub::PrepareAsyncsend_vote_requestRaw(::grpc::ClientContext* context, const ::raft::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raft::VoteReply, ::raft::VoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_vote_request_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raft::VoteReply>* dummyRaftService::Stub::Asyncsend_vote_requestRaw(::grpc::ClientContext* context, const ::raft::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_vote_requestRaw(context, request, cq);
  result->StartCall();
  return result;
}

dummyRaftService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dummyRaftService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dummyRaftService::Service, ::raft::MessageContent, ::raft::MessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dummyRaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raft::MessageContent* req,
             ::raft::MessageReply* resp) {
               return service->send_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dummyRaftService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dummyRaftService::Service, ::raft::VoteRequest, ::raft::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dummyRaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raft::VoteRequest* req,
             ::raft::VoteReply* resp) {
               return service->vote_request(ctx, req, resp);
             }, this)));
}

dummyRaftService::Service::~Service() {
}

::grpc::Status dummyRaftService::Service::send_message(::grpc::ServerContext* context, const ::raft::MessageContent* request, ::raft::MessageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dummyRaftService::Service::vote_request(::grpc::ServerContext* context, const ::raft::VoteRequest* request, ::raft::VoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raft

