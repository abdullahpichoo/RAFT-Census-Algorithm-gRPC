// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raft {
PROTOBUF_CONSTEXPR VoteRequest::VoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.term_no_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteContentDefaultTypeInternal() {}
  union {
    VoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteContentDefaultTypeInternal _VoteContent_default_instance_;
PROTOBUF_CONSTEXPR VoteReply::VoteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_no_)*/0
  , /*decltype(_impl_.vote_granted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteReplyDefaultTypeInternal() {}
  union {
    VoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
PROTOBUF_CONSTEXPR MessageContent::MessageContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.term_no_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageContentDefaultTypeInternal() {}
  union {
    MessageContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageContentDefaultTypeInternal _MessageContent_default_instance_;
PROTOBUF_CONSTEXPR MessageReply::MessageReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_no_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageReplyDefaultTypeInternal() {}
  union {
    MessageReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageReplyDefaultTypeInternal _MessageReply_default_instance_;
}  // namespace raft
static ::_pb::Metadata file_level_metadata_raft_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_raft_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raft_2eproto = nullptr;

const uint32_t TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _impl_.node_status_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _impl_.term_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _impl_.term_no_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteReply, _impl_.vote_granted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MessageContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MessageContent, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::raft::MessageContent, _impl_.node_status_),
  PROTOBUF_FIELD_OFFSET(::raft::MessageContent, _impl_.term_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MessageReply, _impl_.term_no_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::VoteRequest)},
  { 9, -1, -1, sizeof(::raft::VoteReply)},
  { 17, -1, -1, sizeof(::raft::MessageContent)},
  { 26, -1, -1, sizeof(::raft::MessageReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raft::_VoteContent_default_instance_._instance,
  &::raft::_VoteReply_default_instance_._instance,
  &::raft::_MessageContent_default_instance_._instance,
  &::raft::_MessageReply_default_instance_._instance,
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\022\004raft\"D\n\013VoteContent\022\017\n\007nod"
  "e_id\030\001 \001(\005\022\023\n\013node_status\030\002 \001(\t\022\017\n\007term_"
  "no\030\003 \001(\005\"2\n\tVoteReply\022\017\n\007term_no\030\001 \001(\005\022\024"
  "\n\014vote_granted\030\002 \001(\010\"G\n\016MessageContent\022\017"
  "\n\007node_id\030\001 \001(\005\022\023\n\013node_status\030\002 \001(\t\022\017\n\007"
  "term_no\030\003 \001(\005\"\037\n\014MessageReply\022\017\n\007term_no"
  "\030\001 \001(\0052\211\001\n\020dummyRaftService\022:\n\014send_mess"
  "age\022\024.raft.MessageContent\032\022.raft.Message"
  "Reply\"\000\0229\n\021send_vote_request\022\021.raft.Vote"
  "Content\032\017.raft.VoteReply\"\000B*\n\025io.grpc.ex"
  "amples.raftB\tRaftProtoP\001\242\002\003HLWb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2eproto = {
    false, false, 438, descriptor_table_protodef_raft_2eproto,
    "raft.proto",
    &descriptor_table_raft_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
    file_level_metadata_raft_2eproto, file_level_enum_descriptors_raft_2eproto,
    file_level_service_descriptors_raft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2eproto_getter() {
  return &descriptor_table_raft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2eproto(&descriptor_table_raft_2eproto);
namespace raft {

// ===================================================================

class VoteRequest::_Internal {
 public:
};

VoteRequest::VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_status_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.term_no_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_status().empty()) {
    _this->_impl_.node_status_.Set(from._internal_node_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.term_no_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.term_no_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteRequest)
}

inline void VoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_status_){}
    , decltype(_impl_.node_id_){0}
    , decltype(_impl_.term_no_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:raft.VoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_status_.Destroy();
}

void VoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_status_.ClearToEmpty();
  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.term_no_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.term_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.VoteRequest.node_status"));
        } else
          goto handle_unusual;
        continue;
      // int32 term_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.term_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // string node_status = 2;
  if (!this->_internal_node_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_status().data(), static_cast<int>(this->_internal_node_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.VoteRequest.node_status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_status(), target);
  }

  // int32 term_no = 3;
  if (this->_internal_term_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_term_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_status = 2;
  if (!this->_internal_node_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_status());
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // int32 term_no = 3;
  if (this->_internal_term_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteRequest::GetClassData() const { return &_class_data_; }


void VoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteRequest*>(&to_msg);
  auto& from = static_cast<const VoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_status().empty()) {
    _this->_internal_set_node_status(from._internal_node_status());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_term_no() != 0) {
    _this->_internal_set_term_no(from._internal_term_no());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_status_, lhs_arena,
      &other->_impl_.node_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteRequest, _impl_.term_no_)
      + sizeof(VoteRequest::_impl_.term_no_)
      - PROTOBUF_FIELD_OFFSET(VoteRequest, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[0]);
}

// ===================================================================

class VoteReply::_Internal {
 public:
};

VoteReply::VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.VoteReply)
}
VoteReply::VoteReply(const VoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_no_){}
    , decltype(_impl_.vote_granted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_no_, &from._impl_.term_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vote_granted_) -
    reinterpret_cast<char*>(&_impl_.term_no_)) + sizeof(_impl_.vote_granted_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteReply)
}

inline void VoteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_no_){0}
    , decltype(_impl_.vote_granted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoteReply::~VoteReply() {
  // @@protoc_insertion_point(destructor:raft.VoteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vote_granted_) -
      reinterpret_cast<char*>(&_impl_.term_no_)) + sizeof(_impl_.vote_granted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool vote_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term_no = 1;
  if (this->_internal_term_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term_no(), target);
  }

  // bool vote_granted = 2;
  if (this->_internal_vote_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteReply)
  return target;
}

size_t VoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term_no = 1;
  if (this->_internal_term_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term_no());
  }

  // bool vote_granted = 2;
  if (this->_internal_vote_granted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteReply::GetClassData() const { return &_class_data_; }


void VoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteReply*>(&to_msg);
  auto& from = static_cast<const VoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term_no() != 0) {
    _this->_internal_set_term_no(from._internal_term_no());
  }
  if (from._internal_vote_granted() != 0) {
    _this->_internal_set_vote_granted(from._internal_vote_granted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteReply::CopyFrom(const VoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteReply::IsInitialized() const {
  return true;
}

void VoteReply::InternalSwap(VoteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.vote_granted_)
      + sizeof(VoteReply::_impl_.vote_granted_)
      - PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.term_no_)>(
          reinterpret_cast<char*>(&_impl_.term_no_),
          reinterpret_cast<char*>(&other->_impl_.term_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[1]);
}

// ===================================================================

class MessageContent::_Internal {
 public:
};

MessageContent::MessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.MessageContent)
}
MessageContent::MessageContent(const MessageContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_status_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.term_no_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_status().empty()) {
    _this->_impl_.node_status_.Set(from._internal_node_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.term_no_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.term_no_));
  // @@protoc_insertion_point(copy_constructor:raft.MessageContent)
}

inline void MessageContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_status_){}
    , decltype(_impl_.node_id_){0}
    , decltype(_impl_.term_no_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageContent::~MessageContent() {
  // @@protoc_insertion_point(destructor:raft.MessageContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_status_.Destroy();
}

void MessageContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MessageContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_status_.ClearToEmpty();
  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.term_no_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.term_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.MessageContent.node_status"));
        } else
          goto handle_unusual;
        continue;
      // int32 term_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.term_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MessageContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // string node_status = 2;
  if (!this->_internal_node_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_status().data(), static_cast<int>(this->_internal_node_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.MessageContent.node_status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_status(), target);
  }

  // int32 term_no = 3;
  if (this->_internal_term_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_term_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MessageContent)
  return target;
}

size_t MessageContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MessageContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_status = 2;
  if (!this->_internal_node_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_status());
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // int32 term_no = 3;
  if (this->_internal_term_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageContent::GetClassData() const { return &_class_data_; }


void MessageContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageContent*>(&to_msg);
  auto& from = static_cast<const MessageContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.MessageContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_status().empty()) {
    _this->_internal_set_node_status(from._internal_node_status());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_term_no() != 0) {
    _this->_internal_set_term_no(from._internal_term_no());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageContent::CopyFrom(const MessageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContent::IsInitialized() const {
  return true;
}

void MessageContent::InternalSwap(MessageContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_status_, lhs_arena,
      &other->_impl_.node_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageContent, _impl_.term_no_)
      + sizeof(MessageContent::_impl_.term_no_)
      - PROTOBUF_FIELD_OFFSET(MessageContent, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[2]);
}

// ===================================================================

class MessageReply::_Internal {
 public:
};

MessageReply::MessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raft.MessageReply)
}
MessageReply::MessageReply(const MessageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_no_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.term_no_ = from._impl_.term_no_;
  // @@protoc_insertion_point(copy_constructor:raft.MessageReply)
}

inline void MessageReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_no_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageReply::~MessageReply() {
  // @@protoc_insertion_point(destructor:raft.MessageReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MessageReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.term_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MessageReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term_no = 1;
  if (this->_internal_term_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MessageReply)
  return target;
}

size_t MessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MessageReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term_no = 1;
  if (this->_internal_term_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageReply::GetClassData() const { return &_class_data_; }


void MessageReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageReply*>(&to_msg);
  auto& from = static_cast<const MessageReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft.MessageReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term_no() != 0) {
    _this->_internal_set_term_no(from._internal_term_no());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageReply::CopyFrom(const MessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageReply::IsInitialized() const {
  return true;
}

void MessageReply::InternalSwap(MessageReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.term_no_, other->_impl_.term_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::VoteRequest*
Arena::CreateMaybeMessage< ::raft::VoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::VoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VoteReply*
Arena::CreateMaybeMessage< ::raft::VoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::VoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MessageContent*
Arena::CreateMaybeMessage< ::raft::MessageContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MessageContent >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MessageReply*
Arena::CreateMaybeMessage< ::raft::MessageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MessageReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
