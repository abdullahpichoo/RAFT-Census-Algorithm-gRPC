// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
namespace raft {
class MessageContent;
struct MessageContentDefaultTypeInternal;
extern MessageContentDefaultTypeInternal _MessageContent_default_instance_;
class MessageReply;
struct MessageReplyDefaultTypeInternal;
extern MessageReplyDefaultTypeInternal _MessageReply_default_instance_;
class VoteRequest;
struct VoteContentDefaultTypeInternal;
extern VoteContentDefaultTypeInternal _VoteContent_default_instance_;
class VoteReply;
struct VoteReplyDefaultTypeInternal;
extern VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::MessageContent* Arena::CreateMaybeMessage<::raft::MessageContent>(Arena*);
template<> ::raft::MessageReply* Arena::CreateMaybeMessage<::raft::MessageReply>(Arena*);
template<> ::raft::VoteRequest* Arena::CreateMaybeMessage<::raft::VoteRequest>(Arena*);
template<> ::raft::VoteReply* Arena::CreateMaybeMessage<::raft::VoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {

// ===================================================================

class VoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.VoteRequest) */ {
 public:
  inline VoteRequest() : VoteRequest(nullptr) {}
  ~VoteRequest() override;
  explicit PROTOBUF_CONSTEXPR VoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteRequest(const VoteRequest& from);
  VoteRequest(VoteRequest&& from) noexcept
    : VoteRequest() {
    *this = ::std::move(from);
  }

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteRequest& operator=(VoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteRequest* internal_default_instance() {
    return reinterpret_cast<const VoteRequest*>(
               &_VoteContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoteRequest& a, VoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteRequest& from) {
    VoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.VoteRequest";
  }
  protected:
  explicit VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStatusFieldNumber = 2,
    kNodeIdFieldNumber = 1,
    kTermNoFieldNumber = 3,
  };
  // string node_status = 2;
  void clear_node_status();
  const std::string& node_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_status();
  PROTOBUF_NODISCARD std::string* release_node_status();
  void set_allocated_node_status(std::string* node_status);
  private:
  const std::string& _internal_node_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_status(const std::string& value);
  std::string* _internal_mutable_node_status();
  public:

  // int32 node_id = 1;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // int32 term_no = 3;
  void clear_term_no();
  int32_t term_no() const;
  void set_term_no(int32_t value);
  private:
  int32_t _internal_term_no() const;
  void _internal_set_term_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.VoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_status_;
    int32_t node_id_;
    int32_t term_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class VoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.VoteReply) */ {
 public:
  inline VoteReply() : VoteReply(nullptr) {}
  ~VoteReply() override;
  explicit PROTOBUF_CONSTEXPR VoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteReply(const VoteReply& from);
  VoteReply(VoteReply&& from) noexcept
    : VoteReply() {
    *this = ::std::move(from);
  }

  inline VoteReply& operator=(const VoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteReply& operator=(VoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteReply* internal_default_instance() {
    return reinterpret_cast<const VoteReply*>(
               &_VoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VoteReply& a, VoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteReply& from) {
    VoteReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.VoteReply";
  }
  protected:
  explicit VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermNoFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int32 term_no = 1;
  void clear_term_no();
  int32_t term_no() const;
  void set_term_no(int32_t value);
  private:
  int32_t _internal_term_no() const;
  void _internal_set_term_no(int32_t value);
  public:

  // bool vote_granted = 2;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.VoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_no_;
    bool vote_granted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class MessageContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.MessageContent) */ {
 public:
  inline MessageContent() : MessageContent(nullptr) {}
  ~MessageContent() override;
  explicit PROTOBUF_CONSTEXPR MessageContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageContent(const MessageContent& from);
  MessageContent(MessageContent&& from) noexcept
    : MessageContent() {
    *this = ::std::move(from);
  }

  inline MessageContent& operator=(const MessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageContent& operator=(MessageContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageContent* internal_default_instance() {
    return reinterpret_cast<const MessageContent*>(
               &_MessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageContent& a, MessageContent& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageContent& from) {
    MessageContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.MessageContent";
  }
  protected:
  explicit MessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStatusFieldNumber = 2,
    kNodeIdFieldNumber = 1,
    kTermNoFieldNumber = 3,
  };
  // string node_status = 2;
  void clear_node_status();
  const std::string& node_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_status();
  PROTOBUF_NODISCARD std::string* release_node_status();
  void set_allocated_node_status(std::string* node_status);
  private:
  const std::string& _internal_node_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_status(const std::string& value);
  std::string* _internal_mutable_node_status();
  public:

  // int32 node_id = 1;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // int32 term_no = 3;
  void clear_term_no();
  int32_t term_no() const;
  void set_term_no(int32_t value);
  private:
  int32_t _internal_term_no() const;
  void _internal_set_term_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.MessageContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_status_;
    int32_t node_id_;
    int32_t term_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class MessageReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.MessageReply) */ {
 public:
  inline MessageReply() : MessageReply(nullptr) {}
  ~MessageReply() override;
  explicit PROTOBUF_CONSTEXPR MessageReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageReply(const MessageReply& from);
  MessageReply(MessageReply&& from) noexcept
    : MessageReply() {
    *this = ::std::move(from);
  }

  inline MessageReply& operator=(const MessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageReply& operator=(MessageReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageReply* internal_default_instance() {
    return reinterpret_cast<const MessageReply*>(
               &_MessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageReply& a, MessageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageReply& from) {
    MessageReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.MessageReply";
  }
  protected:
  explicit MessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermNoFieldNumber = 1,
  };
  // int32 term_no = 1;
  void clear_term_no();
  int32_t term_no() const;
  void set_term_no(int32_t value);
  private:
  int32_t _internal_term_no() const;
  void _internal_set_term_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.MessageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoteRequest

// int32 node_id = 1;
inline void VoteRequest::clear_node_id() {
  _impl_.node_id_ = 0;
}
inline int32_t VoteRequest::_internal_node_id() const {
  return _impl_.node_id_;
}
inline int32_t VoteRequest::node_id() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.node_id)
  return _internal_node_id();
}
inline void VoteRequest::_internal_set_node_id(int32_t value) {
  
  _impl_.node_id_ = value;
}
inline void VoteRequest::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:raft.VoteRequest.node_id)
}

// string node_status = 2;
inline void VoteRequest::clear_node_status() {
  _impl_.node_status_.ClearToEmpty();
}
inline const std::string& VoteRequest::node_status() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.node_status)
  return _internal_node_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoteRequest::set_node_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.VoteRequest.node_status)
}
inline std::string* VoteRequest::mutable_node_status() {
  std::string* _s = _internal_mutable_node_status();
  // @@protoc_insertion_point(field_mutable:raft.VoteRequest.node_status)
  return _s;
}
inline const std::string& VoteRequest::_internal_node_status() const {
  return _impl_.node_status_.Get();
}
inline void VoteRequest::_internal_set_node_status(const std::string& value) {
  
  _impl_.node_status_.Set(value, GetArenaForAllocation());
}
inline std::string* VoteRequest::_internal_mutable_node_status() {
  
  return _impl_.node_status_.Mutable(GetArenaForAllocation());
}
inline std::string* VoteRequest::release_node_status() {
  // @@protoc_insertion_point(field_release:raft.VoteRequest.node_status)
  return _impl_.node_status_.Release();
}
inline void VoteRequest::set_allocated_node_status(std::string* node_status) {
  if (node_status != nullptr) {
    
  } else {
    
  }
  _impl_.node_status_.SetAllocated(node_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_status_.IsDefault()) {
    _impl_.node_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.VoteRequest.node_status)
}

// int32 term_no = 3;
inline void VoteRequest::clear_term_no() {
  _impl_.term_no_ = 0;
}
inline int32_t VoteRequest::_internal_term_no() const {
  return _impl_.term_no_;
}
inline int32_t VoteRequest::term_no() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.term_no)
  return _internal_term_no();
}
inline void VoteRequest::_internal_set_term_no(int32_t value) {
  
  _impl_.term_no_ = value;
}
inline void VoteRequest::set_term_no(int32_t value) {
  _internal_set_term_no(value);
  // @@protoc_insertion_point(field_set:raft.VoteRequest.term_no)
}

// -------------------------------------------------------------------

// VoteReply

// int32 term_no = 1;
inline void VoteReply::clear_term_no() {
  _impl_.term_no_ = 0;
}
inline int32_t VoteReply::_internal_term_no() const {
  return _impl_.term_no_;
}
inline int32_t VoteReply::term_no() const {
  // @@protoc_insertion_point(field_get:raft.VoteReply.term_no)
  return _internal_term_no();
}
inline void VoteReply::_internal_set_term_no(int32_t value) {
  
  _impl_.term_no_ = value;
}
inline void VoteReply::set_term_no(int32_t value) {
  _internal_set_term_no(value);
  // @@protoc_insertion_point(field_set:raft.VoteReply.term_no)
}

// bool vote_granted = 2;
inline void VoteReply::clear_vote_granted() {
  _impl_.vote_granted_ = false;
}
inline bool VoteReply::_internal_vote_granted() const {
  return _impl_.vote_granted_;
}
inline bool VoteReply::vote_granted() const {
  // @@protoc_insertion_point(field_get:raft.VoteReply.vote_granted)
  return _internal_vote_granted();
}
inline void VoteReply::_internal_set_vote_granted(bool value) {
  
  _impl_.vote_granted_ = value;
}
inline void VoteReply::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:raft.VoteReply.vote_granted)
}

// -------------------------------------------------------------------

// MessageContent

// int32 node_id = 1;
inline void MessageContent::clear_node_id() {
  _impl_.node_id_ = 0;
}
inline int32_t MessageContent::_internal_node_id() const {
  return _impl_.node_id_;
}
inline int32_t MessageContent::node_id() const {
  // @@protoc_insertion_point(field_get:raft.MessageContent.node_id)
  return _internal_node_id();
}
inline void MessageContent::_internal_set_node_id(int32_t value) {
  
  _impl_.node_id_ = value;
}
inline void MessageContent::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:raft.MessageContent.node_id)
}

// string node_status = 2;
inline void MessageContent::clear_node_status() {
  _impl_.node_status_.ClearToEmpty();
}
inline const std::string& MessageContent::node_status() const {
  // @@protoc_insertion_point(field_get:raft.MessageContent.node_status)
  return _internal_node_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageContent::set_node_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.MessageContent.node_status)
}
inline std::string* MessageContent::mutable_node_status() {
  std::string* _s = _internal_mutable_node_status();
  // @@protoc_insertion_point(field_mutable:raft.MessageContent.node_status)
  return _s;
}
inline const std::string& MessageContent::_internal_node_status() const {
  return _impl_.node_status_.Get();
}
inline void MessageContent::_internal_set_node_status(const std::string& value) {
  
  _impl_.node_status_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageContent::_internal_mutable_node_status() {
  
  return _impl_.node_status_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageContent::release_node_status() {
  // @@protoc_insertion_point(field_release:raft.MessageContent.node_status)
  return _impl_.node_status_.Release();
}
inline void MessageContent::set_allocated_node_status(std::string* node_status) {
  if (node_status != nullptr) {
    
  } else {
    
  }
  _impl_.node_status_.SetAllocated(node_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_status_.IsDefault()) {
    _impl_.node_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.MessageContent.node_status)
}

// int32 term_no = 3;
inline void MessageContent::clear_term_no() {
  _impl_.term_no_ = 0;
}
inline int32_t MessageContent::_internal_term_no() const {
  return _impl_.term_no_;
}
inline int32_t MessageContent::term_no() const {
  // @@protoc_insertion_point(field_get:raft.MessageContent.term_no)
  return _internal_term_no();
}
inline void MessageContent::_internal_set_term_no(int32_t value) {
  
  _impl_.term_no_ = value;
}
inline void MessageContent::set_term_no(int32_t value) {
  _internal_set_term_no(value);
  // @@protoc_insertion_point(field_set:raft.MessageContent.term_no)
}

// -------------------------------------------------------------------

// MessageReply

// int32 term_no = 1;
inline void MessageReply::clear_term_no() {
  _impl_.term_no_ = 0;
}
inline int32_t MessageReply::_internal_term_no() const {
  return _impl_.term_no_;
}
inline int32_t MessageReply::term_no() const {
  // @@protoc_insertion_point(field_get:raft.MessageReply.term_no)
  return _internal_term_no();
}
inline void MessageReply::_internal_set_term_no(int32_t value) {
  
  _impl_.term_no_ = value;
}
inline void MessageReply::set_term_no(int32_t value) {
  _internal_set_term_no(value);
  // @@protoc_insertion_point(field_set:raft.MessageReply.term_no)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
